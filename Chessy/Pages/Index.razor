@page "/"
@page "/invite/{key?}"
@using Chessy.Components
@using Chessy.Data
@using Chessy.Models
@using Chessy.Models.Board
@inject MultiplayerService multiplayerService
@inject NavigationManager Navigator
@inject IJSRuntime JSRuntime

<div class="board-container center">
    <BoardComponent Board=@board PlayingColor=@MyColor LocalTwoPlayer=@localTwoPlayer Spectating=@isSpectating/>
    
    @if (string.IsNullOrEmpty(key))
    {
        <div class="menu-container">
            <div class="menu">
                @if (!board.SecondPlayerConnected)
                {
                    <div class="label">
                        Time    
                    </div>
                    <div class="time-controlls">
                            <button class="@(board.Timeframe == 30?"active":string.Empty)" @onclick=@(()=> board.SetTime(30))>
                                <span>
                                    0:30
                                </span>
                            </button>
                            <button class="@(board.Timeframe == 300?"active":string.Empty)" @onclick=@(()=> board.SetTime(300))>
                                <span>
                                    5:00
                                </span>
                            </button>
                            <button class="@(board.Timeframe == 0?"active":string.Empty)" @onclick=@(()=> board.SetTime(0))>
                                <span>
                                   ∞
                                </span>
                            </button>
                        </div>
                    <div class="label">
                        My color
                    </div>
                    <div class="choices">
                        <img src=@($"/img/chess set/{Color.White}_pawn.png") class="@(@MyColor == Color.White ? "selected" : string.Empty)" @onclick=@(() => SetColor(Color.White))/>
                        <img src=@($"/img/chess set/{Color.Black}_pawn.png") class="@(@MyColor == Color.Black ? "selected" : string.Empty)" @onclick=@(() => SetColor(Color.Black))/>
                    </div>
                }
                else{
                    <div class="label">
                        Second player connected
                    </div>
                }
                @if (string.IsNullOrEmpty(hostKey))
                {
                    <button @onclick=@HostGame>
                        Create
                    </button>
                }
                else
                {
                    <div class="code">
                        <strong>
                            Code 
                        </strong>
                        <button @onclick=@CopyUrl>
                            @hostKey
                        </button>
                    </div>
                    <div class="subtext">
                        Click to copy url
                    </div>
                }
            </div>
            <div class="menu-controlls">
                <button @onclick=ResetBoard class="rotate">
                    <span class="material-icons">
                        refresh
                    </span>
                </button>
                <button @onclick=ToggleLocalTwoPlayer>
                    <span class="material-icons">
                        @(localTwoPlayer?"people":"person")
                    </span>
                </button>
                <button @onclick=TogglePause>
                    <span class="material-icons">
                        @(pause?"play_arrow":"pause")
                    </span>
                </button>
            </div>
        </div>
    }
</div>

@code{
    [Parameter]
    public string? key { get; set; }
    public Color MyColor { get; set; }
    private Board board { get; set; }
    private string hostKey{ get; set; }
    private bool localTwoPlayer{ get; set; }
    private bool isSpectating{ get; set; }
    private bool pause { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (string.IsNullOrEmpty(key) || !multiplayerService.Games.ContainsKey(key))
        {
            key = string.Empty;
            board = new Board();
            board.ResetBoard();
            MyColor = Color.White;
        }
        else
        {
            board = multiplayerService.GetBoard(key);

            if (board.IsSecondPlayer)
            {
                MyColor = board.SecondPlayerColor;
                board.IsSecondPlayer = false;
                board.SecondPlayerConnected = true;
                board.ResetBoard();
            }
            else
            {
                MyColor = Color.White;
                isSpectating = true;
            }

            await board.Update();
        }

        board.Notify += OnNotify;
    }
    public void ToggleLocalTwoPlayer()
    {
        localTwoPlayer = !localTwoPlayer;
    }
    public void TogglePause()
    {
        pause = !pause;
        board.GameOver = !board.GameOver;
    }

    public void HostGame()
    {
        hostKey = multiplayerService.GetKey();
        board.SecondPlayerColor = MyColor == Color.White ? Color.Black : Color.White;
        multiplayerService.StartBoard(hostKey, board);
    }

    public async Task CopyUrl()
    {
        await JSRuntime.InvokeVoidAsync("clipboardCopy.copyText", Navigator.BaseUri + "invite/" + hostKey);
    }

    private void SetColor(Color color)
    {
        MyColor = color;
    }
    public void ResetBoard()
    {
        board.ResetBoard();
    }

    public async Task OnNotify(bool board)
    {
        await InvokeAsync(() =>
        {
            StateHasChanged();
        });
    }
}